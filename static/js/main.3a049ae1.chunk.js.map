{"version":3,"sources":["consts/data.js","consts/colors.js","utils/data.js","getData.js","consts/countries.js","components/CountrySelect.jsx","components/Header.jsx","components/NestedBoxes.jsx","components/Charts.jsx","components/App.jsx","index.jsx","utils/display.js"],"names":["TABLE_DELIN","CONFIGURABLE_GID_NAMES","GID_MAP","home","CONFIG_FIELDS","chartId","sourceGid","element","displayName","capPercentage","percentageDecimals","coarseIntegerFormatting","colorOverride","chartType","modelled","formula","hidden","valueField","percentage","DATA_FIELDS","country_iso_code","sourceYear","value","year","indicator","indicator_description","sex","age","population_segment","population_sub_group","country_name","area_name","geographic_scope","value_upper","value_lower","value_comment","unit_format","source_organization","source_database","source_display","notes","modality","modality_category","import_file","import_timestamp","row_id","suppressed","GENERATED_FIELDS","DISPLAY_NAME","DISPLAY_VALUE","DISPLAY_VALUE_LOWER","toUpperCase","DISPLAY_VALUE_UPPER","themePrimary","sand","themeSecondary","indigo","headerColor","gold","colorGroups","orange","grass","plum","tomato","sky","brown","violet","fillIntensity","strokeIntensity","radColors","red","crimson","pink","purple","blue","cyan","teal","green","mint","lime","yellow","amber","gray","mauve","slate","sage","olive","bronze","getRC","radColor","idx","Object","keys","replace","SPECIAL_FILTERS_MAP","_NONE_","_","negate","identity","_SOMETHING_","_ANY_","stubTrue","defaultCompFn","cellVal","filterVal","toLowerCase","getUrl","gid","configParser","row","C","each","key","filterByCountryGenerator","D","getElements","chartConfig","filter","k","startsWith","getSetting","chartConfigsMap","field","get","getField","getFieldBoolean","getFormula","getBounds","vLower","vUpper","parseFloat","getColors","chartSettings","chartElements","visibleElements","groupIdx","parseInt","Math","abs","length","baseColors","colors","map","push","transformYearRange","range","result","exec","y1","y2","String","getFilter","allChartsFilter","allElementsFilter","elementFilter","backupFilters","getRow","chartSourceData","matchingRows","every","maxBy","r","Number","getDataPoint","set","G","capAndFormat","displayValue","options","cap","decimals","displayPercent","capValue","forEach","F","v","cv","coarseFormatting","displayNumber","getCalculatedDataPoint","dataPoints","rawFormula","convertedFormula","eval","error","console","warn","test","isNumber","chartIds","dictionary","async","getCharts","Promise","all","csv","catch","e","getterMap","table","getTable","text","getText","getChart","getter","getChartOrTable","log","elements","textValues","type","name","isPercentage","rowNames","uniq","elem","split","colNames","data","rn","values","cn","column","sheetRow","year_range","isTimeseries","years_arr","elementNameMap","getData","homeRows","lastConfiguredRow","findLast","setConfigGids","isEmpty","baseConfigs","configs","shaped","groupBy","orderedChartIds","uniqBy","c","chart_id","id","chartConfigs","mapValues","configParams","elemDetails","elementName","getChartConfigs","charts","COUNTRIES","CountrySelect","handleCountryChange","selectedIso","FormControl","sx","width","marginTop","marginBottom","InputLabel","Select","labelId","label","onChange","MenuItem","Header","Box","flexGrow","AppBar","position","background","Toolbar","BUFFER_RATIO","TEXT_BUFFER_RATIO","DEFAULT_RATIO","FONT_SIZE_RATIO","HEADER_FONT_SIZE_RATIO","LINE_HEIGHT","CAP_VALUE","innerTextGetter","ratio","round","NestedBoxes","ratios","fillColors","textColors","content","firstSide","horizontal","classes","getInnerText","bufferRatio","textBufferRatio","defaultRatio","fontSizeRatio","headerFontSizeRatio","lineHeight","resolveOrientation","v1","v2","bufferDistance","textBufferDistance","side","x","y","fontSize","headerFontSize","rects","texts","connectingLines","i","innerText","colorOuter","colorInner","textColor","height","fill","below","className","style","txt","j","dy","nextSide","borderWidth","lineStyle","strokeWidth","strokeDasharray","line1","stroke","x1","x2","line2","totalX","totalY","totalXh","totalYh","classNames","viewBox","CustomTooltip","active","payload","isArea","payloads","sortBy","source","p","reverse","dataKey","includes","bounds","formattedBounds","Typography","xmlns","cx","cy","join","Charts","chartData","hiddenElements","setHiddenElements","React","useState","getLineChart","chart","ElementComponent","AreaChart","Area","LineChart","Line","formatter","getName","ResponsiveContainer","aspect","maxHeight","ComposedChart","margin","top","right","left","bottom","CartesianGrid","XAxis","YAxis","domain","undefined","tickFormatter","Tooltip","cursor","Legend","onClick","hiddenMap","cloneDeep","some","d","hide","legendType","tooltipType","stackId","headers","TableCell","scope","rows","TableRow","component","TableContainer","Table","textAlign","TableHead","TableBody","getNested","theme","useTheme","isSm","useMediaQuery","breakpoints","down","up","el","val","title","getIntro","country","find","variant","fontWeight","lg","maxWidth","xl","mb","sm","display","mr","md","letterSpacing","textTransform","m","flexWrap","pt","justifyContent","xs","flexBasis","flexShrink","ml","pb","homeTexts","App","setChartData","setDictionary","setIso","useEffect","then","loading","Paper","elevation","color","fontFamily","typography","target","realIso","dangerouslySetInnerHTML","__html","px","mx","py","mt","palette","paper","columnCount","columnGap","sort","a","b","term","definition","transformLink","createTheme","primary","main","secondary","ThemedApp","ThemeProvider","rootElement","document","getElementById","render","min","isFinite","toString","toPrecision","t","replaceAll"],"mappings":"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","file":"static/js/main.3a049ae1.chunk.js","sourcesContent":["// export CONSTS\nexport const DISABLED = false;\nexport const TABLE_DELIN = \"__\";\n\n// these are set in the home sheet for version controlability\nexport const CONFIGURABLE_GID_NAMES = [\"configs\", \"dictionary\"];\n// gids pointing to Sheet tabs\nexport const GID_MAP = {\n  home: \"0\",\n  // configs: null,\n  // dictionary: null,\n  // // settings: null,\n};\n\n// now extracted from chart configs sheet\n// export const chartIds = [\n//   \"p95\",\n//   \"plhiv_diagnosis\",\n//   \"late_hiv\",\n//   \"plhiv_art\",\n//   \"new_art\",\n//   \"plhiv_suppressed\",\n//   \"testing_coverage\",\n//   \"key_populations\",\n//   \"policy_compliance\",\n// ];\n\n// MAPS TO SPREADSHEET COLUMN NAMES:\n// CONFIG SHEET - identifier fields (ie non-data fields)\nexport const CONFIG_FIELDS = {\n  chartId: \"chart_id\",\n  sourceGid: \"source_gid\",\n  element: \"element\",\n  displayName: \"display_name\",\n  capPercentage: \"cap_percentage\",\n  percentageDecimals: \"percentage_decimals\",\n  coarseIntegerFormatting: \"coarse_integer_formatting\",\n  colorOverride: \"color_override\",\n  chartType: \"chart_type\",\n  modelled: \"modelled\",\n  formula: \"formula\",\n  hidden: \"hidden\",\n  valueField: \"value_field\",\n  percentage: \"percentage\",\n};\n\n// DATA SHEETS - data fields (fields that configs can filter by)\nexport const DATA_FIELDS = {\n  // we preserve snake_case as a reminder that these are essentially database fields\n  country_iso_code: \"country_iso_code\",\n  sourceYear: \"source_year\",\n  value: \"value\",\n  year: \"year\",\n  indicator: \"indicator\",\n  indicator_description: \"indicator_description\",\n  sex: \"sex\",\n  age: \"age\",\n  population_segment: \"population_segment\",\n  population_sub_group: \"population_sub_group\",\n  country_name: \"country_name\",\n  area_name: \"area_name\",\n  geographic_scope: \"geographic_scope\",\n  value_upper: \"value_upper\",\n  value_lower: \"value_lower\",\n  value_comment: \"value_comment\",\n  unit_format: \"unit_format\",\n  source_organization: \"source_organization\",\n  source_database: \"source_database\",\n  source_display: \"source_display\",\n  notes: \"notes\",\n  modality: \"modality\",\n  modality_category: \"modality_category\",\n  import_file: \"import_file\",\n  import_timestamp: \"import_timestamp\",\n  row_id: \"row_id\",\n  suppressed: \"suppressed\",\n};\n\n// GENERATED FIELDS - fields we add for the app\nexport const GENERATED_FIELDS = {\n  // we use UPPER_CASE to distinguish from actual \"database\" fields from the Sheet\n  DISPLAY_NAME: \"DISPLAY_NAME\",\n  DISPLAY_VALUE: \"DISPLAY_VALUE\",\n  DISPLAY_VALUE_LOWER: `DISPLAY_${DATA_FIELDS.value_lower.toUpperCase()}`,\n  DISPLAY_VALUE_UPPER: `DISPLAY_${DATA_FIELDS.value_upper.toUpperCase()}`,\n};\n","import {\n  tomato,\n  red,\n  crimson,\n  pink,\n  plum,\n  purple,\n  violet,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  grass,\n  orange,\n  brown,\n  sky,\n  mint,\n  lime,\n  yellow,\n  amber,\n  gray,\n  mauve,\n  slate,\n  sage,\n  olive,\n  sand,\n  gold,\n  bronze,\n} from \"@radix-ui/colors\";\n\n// keep in sync with index.html background\nexport const themePrimary = sand;\nexport const themeSecondary = indigo;\nexport const headerColor = gold;\nexport const coreColors = [orange, grass, plum];\nexport const altColors = [tomato, indigo, gold];\nexport const alt2Colors = [sky, brown, violet, sand];\nexport const colorGroups = [coreColors, altColors, alt2Colors];\n// these intensities correspond to the radix index to use\nexport const fillIntensity = 8;\nexport const strokeIntensity = 11;\n\nexport const radColors = [\n  tomato,\n  red,\n  crimson,\n  pink,\n  plum,\n  purple,\n  violet,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  grass,\n  orange,\n  brown,\n  sky,\n  mint,\n  lime,\n  yellow,\n  amber,\n  gray,\n  mauve,\n  slate,\n  sage,\n  olive,\n  sand,\n  gold,\n  bronze,\n];\n\nexport const getRC = (radColor, idx) => {\n  // return custom colors as-is\n  if (typeof radColor === \"string\") return radColor;\n  const c1 = Object.keys(radColor)[0];\n  const c = c1.replace(/\\d/, \"\") + idx;\n  return radColor[c];\n};\n","import _ from \"lodash\";\nimport { colorGroups } from \"../consts/colors\";\nimport {\n  CONFIG_FIELDS as C,\n  DATA_FIELDS as D,\n  GENERATED_FIELDS as G,\n} from \"../consts/data\";\nimport { capValue, displayNumber, displayPercent } from \"./display\";\n\n// functions to test whether a row matches a filter for special Sheet cell input values\nconst SPECIAL_FILTERS_MAP = {\n  _NONE_: _.negate(_.identity), // cells only included if empty\n  _SOMETHING_: _.identity, // cells only included if not empty\n  _ANY_: _.stubTrue, // allow any cell value (to overwrite broader filter)\n};\n// default function to test whether a row matches a filter\nconst defaultCompFn = (cellVal, filterVal) =>\n  cellVal.toLowerCase() === filterVal.toLowerCase();\n\n// HELPERS\nexport const getUrl = (gid) =>\n  `https://docs.google.com/spreadsheets/d/e/2PACX-1vSAEOXOt5aHDcb35lpCsSO5AvHTZPplXHrHGaIXTJjCtW_B96D0MOItWZLGv1j4lagTxnuVClms6M0X/pub?gid=${gid}&single=true&output=csv`;\n\nexport const configParser = (row) => {\n  if (!row[C.chartId]) return;\n  delete row[\"\"];\n\n  _.each(row, (value, key) => {\n    // remove k/v pair for actually empty values\n    if (value === \"\") delete row[key];\n    // turn \"null\" in sheet into \"\" values\n    // else row[key] = value === \"null\" ? \"\" : value;\n  });\n\n  return row;\n};\n\nexport const filterByCountryGenerator = (country_iso_code) => {\n  return (row) => (row[D.country_iso_code] === country_iso_code ? row : null);\n};\n\n// determine actual chart elements from chart config\nexport const getElements = (chartConfig) =>\n  Object.keys(chartConfig).filter((k) => k !== \"all\" && !k.startsWith(\"_key_\"));\n\n// get setting from element, else chart, else global\nexport const getSetting = ({\n  element = \"all\",\n  chartConfigsMap,\n  field,\n  chartId = \"all\",\n}) =>\n  _.get(chartConfigsMap, [chartId, element, 0, field]) ||\n  _.get(chartConfigsMap, [chartId, \"all\", 0, field]) ||\n  _.get(chartConfigsMap, [\"all\", 0, field]);\n\n// omit element to get chart-wide setting\nexport const getField = ({ element = \"all\", chartConfig, field }) =>\n  _.get(chartConfig, [element, 0, field]);\n\n// omit element to get chart-wide setting\nexport const getFieldBoolean = ({ element = \"all\", chartConfig, field }) =>\n  !!getField({ element, chartConfig, field });\n\nexport const getFormula = ({ element, chartConfig }) =>\n  getField({ element, chartConfig, field: C.formula });\n\nexport const getBounds = (row = {}) => {\n  const { [D.value_lower]: vLower, [D.value_upper]: vUpper } = row;\n  if (!parseFloat(vLower) || !parseFloat(vUpper)) return;\n  return [parseFloat(vLower), parseFloat(vUpper)];\n};\n\n// determine a chart's colors based on its override settings\nexport const getColors = ({\n  chartSettings,\n  chartConfig,\n  chartElements: visibleElements,\n}) => {\n  // chart-wide override determines which color group to use\n  let groupIdx = parseInt(Math.abs(_.get(chartSettings, C.colorOverride)));\n  groupIdx = ((groupIdx || 1) - 1) % colorGroups.length;\n\n  const baseColors = colorGroups[groupIdx];\n  const colors = visibleElements.map((element, idx) => {\n    // element-specific overrides trump the base group color\n    const override = getField({ chartConfig, element, field: C.colorOverride });\n    return override || baseColors[idx % baseColors.length];\n  });\n\n  const type = _.get(chartSettings, C.chartType);\n  // nested boxes charts need one more color than they have elements\n  if (type === \"nested\")\n    colors.push(baseColors[visibleElements.length % baseColors.length]);\n\n  return colors;\n};\n\n// turn \"[2018-2020]\" into [2018, 2019, 2020]\nexport const transformYearRange = (range) => {\n  const regex = /\\[(\\d+)-(\\d+)\\]/;\n  const result = regex.exec(range);\n  if (!result || !result.length > 1) return [];\n  const y1 = parseInt(result[1]);\n  const y2 = parseInt(result[2]);\n  return _.range(y1, y2 + 1).map(String);\n};\n\n// derive a row filter of type { sex: \"males\", age: \"15+\" }\nexport const getFilter = ({\n  chartId,\n  element,\n  year = null,\n  country_iso_code,\n  chartConfigsMap,\n}) => {\n  // filter applied to all charts\n  const allChartsFilter = _.get(chartConfigsMap, \"all[0]\", {});\n  // filter applied to all elements within this chart\n  const allElementsFilter = _.get(chartConfigsMap, [chartId, \"all\", 0], {});\n  // filter applied to this element\n  // (backupFilters may be used for source prioritization)\n  const [elementFilter, ...backupFilters] = _.get(\n    chartConfigsMap,\n    [chartId, element],\n    [{}]\n  );\n  // console.log(elementFilter);\n\n  const filter = {\n    ...allChartsFilter,\n    ...allElementsFilter,\n    ...elementFilter,\n    country_iso_code,\n  };\n  if (!!year) filter.year = year;\n  return filter;\n};\n\n// find appropriate row using filter\nexport const getRow = ({ filter, chartSourceData }) => {\n  const matchingRows = _.filter(chartSourceData, (row) => {\n    return _.every(filter, (filterVal, field) => {\n      // only filter by data sheet fields\n      if (!D[field]) return true;\n\n      const cellVal = row[field] || \"\";\n      let comparisonFn = SPECIAL_FILTERS_MAP[filterVal] || defaultCompFn;\n\n      // if (!row[field]) return !filterVal;\n      return !!comparisonFn(cellVal, filterVal);\n    });\n  });\n\n  // find highest year, use source year to break ties\n  return _.maxBy(matchingRows, (r) => {\n    const y = Number(_.get(r, D.year, 0));\n    const sy = Number(_.get(r, D.sourceYear, 0));\n    return y + sy / 10000;\n  });\n};\n\n// find/create data point to use for a line point or table cell\nexport const getDataPoint = ({\n  chartId,\n  element,\n  year = null,\n  country_iso_code,\n  chartConfigsMap,\n  chartSourceData,\n  // valueParser = _.identity,\n}) => {\n  const filter = getFilter({\n    chartId,\n    element,\n    year,\n    country_iso_code,\n    chartConfigsMap,\n    chartSourceData,\n  });\n\n  const row = getRow({ filter, chartSourceData });\n\n  // usually we care about \"value\", but sometimes \"value_comment\"\n  const valueField = _.get(filter, C.valueField, D.value);\n  let value = _.get(row, valueField, null);\n\n  if (!row || !value) return {};\n\n  // add display name for elements appearance in legend, tooltip\n  const displayName = getField({\n    element,\n    chartConfig: chartConfigsMap[chartId],\n    field: C.displayName,\n  });\n  displayName && _.set(row, G.DISPLAY_NAME, displayName);\n\n  // assume that value_comment (or other non-value) field is for non-numeric column\n  if (valueField && valueField !== D.value) return { row, value };\n\n  // assume that value holds numeric data, proceed to process\n  return capAndFormat({ row, value, chartConfigsMap, chartId, element });\n};\n\n// mutates its row input!\n// applies caps and display formatting settings to numeric row/values\nexport const capAndFormat = ({\n  row,\n  value,\n  chartConfigsMap,\n  chartId,\n  element,\n}) => {\n  let displayValue = value;\n\n  const isPercentage = getFieldBoolean({\n    chartConfig: chartConfigsMap[chartId],\n    field: C.percentage,\n  });\n\n  if (isPercentage) {\n    const cap = getSetting({\n      chartConfigsMap,\n      chartId,\n      element,\n      field: C.capPercentage,\n    });\n    const decimals = getSetting({\n      chartConfigsMap,\n      chartId,\n      element,\n      field: C.percentageDecimals,\n    });\n\n    // value = value && valueParser(value);\n    const options = { cap, decimals };\n    // be sure to capture display value BEFORE capping, so it includes >\n    displayValue = displayPercent(value, options);\n    value = capValue(value, options);\n    // overwriting\n    capValue && _.set(row, D.value, value);\n\n    [D.value_lower, D.value_upper].forEach((F) => {\n      const v = _.get(row, F);\n\n      // formatted capped val for tooltips\n      v && _.set(row, `DISPLAY_${F.toUpperCase()}`, displayPercent(v, options));\n\n      // capped val for plotting\n      const cv = v && capValue(v, options);\n      cv && _.set(row, F, cv);\n    });\n  } else {\n    // is integer\n    const coarseFormatting = !!getSetting({\n      chartConfigsMap,\n      chartId,\n      element,\n      field: C.coarseIntegerFormatting,\n    });\n    displayValue = displayNumber(value, { coarseFormatting });\n\n    [D.value_lower, D.value_upper].forEach((F) => {\n      let v = _.get(row, F);\n      // formatted value for tooltips\n      v && _.set(row, `DISPLAY_${F.toUpperCase()}`, displayNumber(v));\n      // v && _.set(row, F, v);\n    });\n  }\n\n  // formatted value for tooltips\n  displayValue && _.set(row, G.DISPLAY_VALUE, displayValue);\n\n  return { row, value };\n};\n\n// create derived data point (from other found points) using formula provided in Sheet\nexport const getCalculatedDataPoint = ({\n  chartConfigsMap,\n  element,\n  dataPoints,\n  chartId,\n}) => {\n  const chartConfig = chartConfigsMap[chartId];\n  const rawFormula = getFormula({ element, chartConfig });\n  let convertedFormula = rawFormula;\n\n  // where the *magic* happens: formula is converted from the\n  // string provided in the Sheet to an actual mathematical\n  // expression by swapping element names for their values\n  // e.g.:  total_hiv-aware  becomes  7843-384\n  _.each(dataPoints, (value, key) => {\n    convertedFormula = convertedFormula.replace(key, value);\n  });\n\n  let result = null;\n  // attempt to evaluate the resulting expression\n  try {\n    result = eval(convertedFormula);\n  } catch (error) {\n    console.warn(`cannot evaluate ${rawFormula} (${convertedFormula})`);\n    return { value: null };\n  }\n\n  // only allow numbers & arith operators (otherwise eg null will evaluate to 0)\n  if (!/^[\\d-+*\\/\\.]+$/.test(convertedFormula) || !_.isNumber(result)) {\n    console.warn(`missing values for ${rawFormula} (${convertedFormula})`);\n    return { value: null };\n  }\n\n  // add display name for elements appearance in legend, tooltip\n  const displayName =\n    getField({\n      element,\n      chartConfig,\n      field: C.displayName,\n    }) || element;\n\n  // console.log(result);\n  return capAndFormat({\n    value: result,\n    row: { [G.DISPLAY_NAME]: displayName },\n    chartConfigsMap,\n    chartId,\n    element,\n  });\n};\n","import { csv } from \"d3-fetch\";\nimport _ from \"lodash\";\nimport {\n  CONFIG_FIELDS as C,\n  DATA_FIELDS as D,\n  GENERATED_FIELDS as G,\n  GID_MAP,\n  CONFIGURABLE_GID_NAMES,\n  TABLE_DELIN,\n} from \"./consts/data\";\nimport {\n  getUrl,\n  configParser,\n  filterByCountryGenerator,\n  getElements,\n  getFieldBoolean,\n  getFormula,\n  getBounds,\n  getColors,\n  transformYearRange,\n  getDataPoint,\n  getCalculatedDataPoint,\n  getField,\n} from \"./utils/data\";\n\n// NOTE: *bad practice* currently these are set as global state\n// so that after the data fetch for the first country we can just\n// fetch chart data on subsequent searches\nlet chartConfigsMap = {};\nlet chartIds = [];\nlet dictionary = [];\n\n// ASYNC FETCHERS\nasync function setConfigGids() {\n  // return if already configured\n  if (CONFIGURABLE_GID_NAMES.every((name) => !!GID_MAP[name])) return;\n  const homeRows = await csv(getUrl(GID_MAP.home)).catch((e) => {\n    console.error(\"error in csv(getUrl(GID_MAP.home)): \", e);\n  });\n  CONFIGURABLE_GID_NAMES.forEach((name) => {\n    const lastConfiguredRow = _.findLast(homeRows, (r) => !!r[name]);\n    if (!lastConfiguredRow) {\n      console.error(\"No Sheet GID found for: \", name);\n      return;\n    }\n    GID_MAP[name] = lastConfiguredRow[name];\n  });\n}\n\nasync function getChartConfigs() {\n  const baseConfigs = await csv(getUrl(GID_MAP.configs), configParser).catch(\n    (e) => {\n      console.error(\"error in csv(getUrl(GID_MAP.configs), configParser): \", e);\n    }\n  );\n  const shaped = _.groupBy(baseConfigs, C.chartId);\n\n  const orderedChartIds = _.uniqBy(baseConfigs, \"chart_id\")\n    .map((c) => c.chart_id)\n    .filter((id) => id !== \"all\");\n\n  const chartConfigs = _.mapValues(shaped, (configParams, name) => {\n    // wise?\n    if (name === \"all\") return configParams;\n    return _.groupBy(configParams, C.element);\n  });\n\n  _.each(chartConfigs, (configParams, name) => {\n    if (name === \"all\") return;\n    _.each(configParams, (elemDetails, elementName) => {\n      if (elementName === \"all\") return;\n    });\n  });\n\n  return { chartConfigs, orderedChartIds };\n}\n\nasync function getCharts(country_iso_code) {\n  return await Promise.all(\n    chartIds.map((chartId) => getChartOrTable(chartId, country_iso_code))\n  ).catch((e) => {\n    console.error(\"error in getCharts(): \", e);\n  });\n}\n\nasync function getChartOrTable(chartId, country_iso_code) {\n  // if (![\n  //   \"intro\",\n  //   \"p95\",\n  //   \"plhiv_diagnosis\",\n  //   \"late_hiv\"\n  // ].includes(chartId)) return;\n  // console.log(\"creating : \", chartId);\n  const chartConfig = chartConfigsMap[chartId];\n  // the chart settings are the values on the chart config where element === \"all\"\n  const chartSettings = _.get(chartConfig, \"all[0]\");\n\n  if (!chartConfig || !chartSettings || !chartSettings[C.sourceGid]) {\n    console.warn(\"skipping chart: \", chartId);\n    return null;\n  }\n  const chartSourceData = await csv(\n    getUrl(chartSettings[C.sourceGid]),\n    filterByCountryGenerator(country_iso_code)\n  ).catch((e) => {\n    console.error(\"error in getChartOrTable()): \", e);\n  });\n\n  const getterMap = {\n    table: getTable,\n    text: getText,\n    // nested: getNested, // uses chart\n  };\n\n  const getter = _.get(getterMap, chartSettings[C.chartType], getChart);\n\n  return getter({\n    chartId,\n    chartSettings,\n    chartConfigsMap,\n    chartSourceData,\n    country_iso_code,\n  });\n}\n\nfunction getText({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  country_iso_code,\n}) {\n\n  console.log(\n    chartId,\n    chartSettings,\n    chartConfigsMap,\n    chartSourceData,\n    country_iso_code\n  );\n\n  const elements = getElements(chartConfigsMap[chartId]);\n  const textValues = {}\n  _.each(elements, (element) => {\n    const { row, value } = getDataPoint({\n      chartId,\n      element,\n      country_iso_code,\n      chartConfigsMap,\n      chartSourceData,\n      // valueParser: isPercentage\n    });\n    textValues[element] = value;\n    textValues[`${element}_row`] = row;\n  });\n\n  return {\n    textValues,\n    chartId,\n    country_iso_code,\n    elements,\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n};\n\nfunction getTable({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  country_iso_code,\n}) {\n  const chartConfig = chartConfigsMap[chartId];\n\n  const elements = getElements(chartConfig);\n  const dataPoints = {};\n  // add non-calculated points\n  const isPercentage = getFieldBoolean({\n    chartConfig,\n    field: C.percentage,\n  });\n  _.each(elements, (element) => {\n    const { row, value } = getDataPoint({\n      chartId,\n      element,\n      country_iso_code,\n      chartConfigsMap,\n      chartSourceData,\n      // valueParser: isPercentage\n    });\n    dataPoints[element] = value;\n    dataPoints[element + \"_row\"] = row;\n  });\n\n  const rowNames = _.uniq(elements.map((elem) => elem.split(TABLE_DELIN)[0]));\n  const colNames = _.uniq(elements.map((elem) => elem.split(TABLE_DELIN)[1]));\n\n  const data = rowNames.map((rn) => ({\n    row: _.get(chartConfig, [`_key_${rn}`, 0, C.displayName], rn),\n    values: colNames.map((cn) => ({\n      column: _.get(chartConfig, [`_key_${cn}`, 0, C.displayName], cn),\n      value: _.get(dataPoints, `${rn}${TABLE_DELIN}${cn}`),\n      sheetRow: _.get(dataPoints, `${rn}${TABLE_DELIN}${cn}_row`),\n    })),\n  }));\n  const chart = {\n    data,\n    chartId,\n    country_iso_code,\n    elements: elements,\n    isPercentage,\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n\n  return chart;\n}\n\nfunction getChart({\n  chartId,\n  chartSettings,\n  chartConfigsMap,\n  chartSourceData,\n  country_iso_code,\n}) {\n  const chartConfig = chartConfigsMap[chartId];\n\n  const elements = getElements(chartConfig);\n  const visibleElements = elements.filter(\n    (element) => !getFieldBoolean({ element, chartConfig, field: C.hidden })\n  );\n  // console.log(elements);\n\n  // NOTE: currently all charts range over years\n  const year_range = _.get(chartConfig, [\"all\", 0, D.year]);\n  const isTimeseries = year_range;\n  const years_arr = isTimeseries ? transformYearRange(year_range) : [\"all\"];\n  // console.log(years_arr);\n\n  // getchartdata per element\n  const data = _.map(years_arr, (year) => {\n    const dataPoints = {};\n\n    // add non-calculated points\n    _.each(elements, (element) => {\n      if (!!getFormula({ element, chartConfig })) return null;\n      const { row, value } = getDataPoint({\n        chartId,\n        element,\n        year: isTimeseries ? year : null,\n        country_iso_code,\n        chartConfigsMap,\n        chartSourceData,\n      });\n      dataPoints[element] = value;\n      dataPoints[element + \"_row\"] = row;\n      dataPoints[element + \"_bounds\"] = getBounds(row);\n    });\n\n    // add calculated points (now that non-calculated constituents have values)\n    _.each(elements, (element) => {\n      if (!getFormula({ element, chartConfig })) return null;\n      const { row, value } = getCalculatedDataPoint({\n        chartId,\n        element,\n        chartConfigsMap,\n        dataPoints,\n      });\n      dataPoints[element] = value;\n      dataPoints[element + \"_row\"] = row;\n    });\n\n    // delete elements used only as constituents in calculations\n    _.each(elements, (element) => {\n      if (getFieldBoolean({ element, chartConfig, field: C.hidden })) {\n        // console.log(\"deleting: \", element);\n        delete dataPoints[element];\n      }\n    });\n    dataPoints.name = year;\n    // console.log(dataPoints);\n    return dataPoints;\n  });\n\n  const elementNameMap = {};\n  _.each(\n    visibleElements,\n    (element) =>\n      (elementNameMap[element] = getField({\n        element,\n        chartConfig: chartConfigsMap[chartId],\n        field: C.displayName,\n      }))\n  );\n\n  const colors = getColors({\n    chartSettings,\n    chartConfig,\n    chartElements: visibleElements,\n  });\n\n  const chart = {\n    data: isTimeseries ? data : data[0],\n    chartId,\n    country_iso_code,\n    elements: visibleElements,\n    elementNameMap,\n    colors,\n    isPercentage: getFieldBoolean({\n      chartConfig,\n      field: C.percentage,\n    }),\n    type: _.get(chartSettings, C.chartType),\n    name: _.get(chartSettings, C.displayName, chartId),\n  };\n\n  return chart;\n}\n// ___ END ASYNC FETCHERS _____\n\n// MAIN FUNCTION\nasync function getData(country_iso_code) {\n  // if (DISABLED) return [];\n  // CONFIGURE GIDS MAP\n  await setConfigGids().catch((e) => {\n    console.error(\"error in setConfigGids(): \", e);\n  });\n\n  // GRAB DICTIONARY (unless already loaded)\n  if (_.isEmpty(dictionary)) {\n    dictionary = await csv(getUrl(GID_MAP.dictionary)).catch((e) => {\n      console.error(\"error in getDictionary: \", e);\n    });\n  }\n\n  // GRAB CONFIGS (unless already loaded)\n  if (_.isEmpty(chartConfigsMap)) {\n    const result = await getChartConfigs().catch((e) => {\n      console.error(\"error in getChartConfigs(): \", e);\n    });\n    chartConfigsMap = result.chartConfigs;\n    chartIds = result.orderedChartIds;\n    console.log(\"@@@ ALL CONFIGS: \");\n    console.log(chartConfigsMap);\n  }\n\n  // CREATE CHARTS\n  const charts = await getCharts(country_iso_code).catch((e) => {\n    console.error(\"error in getCharts(country_iso_code): \", e);\n  });\n  return { charts, dictionary };\n}\n\nexport default getData;\n","// TODO: add to sheet?\nexport const COUNTRIES = [\n  { id: \"CIV\", name: \"Côte d'Ivoire\" },\n  { id: \"CMR\", name: \"Cameroon\" },\n  { id: \"GHA\", name: \"Ghana\" },\n  { id: \"GIN\", name: \"Guinea\" },\n  { id: \"IDN\", name: \"Indonesia\" },\n  { id: \"MOZ\", name: \"Mozambique\" },\n  { id: \"NGA\", name: \"Nigeria\" },\n  { id: \"PHL\", name: \"Philippines\" },\n  { id: \"TZA\", name: \"United Republic of Tanzania\" },\n  { id: \"ZMB\", name: \"Zambia\" },\n];\n","import React from \"react\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport { COUNTRIES } from \"../consts/countries\";\n\nexport const CountrySelect = ({ handleCountryChange, selectedIso }) => {\n  return (\n    <FormControl sx={{ width: 300, marginTop: 1, marginBottom: 1 }}>\n      <InputLabel id=\"country\">Country</InputLabel>\n      <Select\n        labelId=\"country\"\n        id=\"country-select\"\n        value={selectedIso || \"home\"}\n        label=\"Country\"\n        onChange={handleCountryChange}\n      >\n        <MenuItem value={\"home\"}>Select a country...</MenuItem>\n        {COUNTRIES.map(({ id, name }) => (\n          <MenuItem key={id} value={id}>\n            {name}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n","import React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport { CountrySelect } from \"./CountrySelect\";\nimport { getRC, headerColor } from \"../consts/colors\";\n\nexport const Header = ({ selectedIso, handleCountryChange }) => {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"fixed\" sx={{ background: getRC(headerColor, 7) }}>\n        <Toolbar>\n          <CountrySelect\n            handleCountryChange={handleCountryChange}\n            selectedIso={selectedIso}\n          />\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n};\n","import React from \"react\";\n// import './styles.css'\nimport _ from \"lodash\";\n\nconst BUFFER_RATIO = 0.2;\nconst TEXT_BUFFER_RATIO = 0.1;\nconst DEFAULT_RATIO = 0.7;\nconst FONT_SIZE_RATIO = 0.1;\nconst HEADER_FONT_SIZE_RATIO = 0.16;\nconst LINE_HEIGHT = 1.1;\nconst CAP_VALUE = null;\n\nconst innerTextGetter = (ratio, { capValue }) => {\n  return !ratio\n    ? \"Unknown %\"\n    : capValue && ratio > capValue\n    ? `>${capValue * 100}%`\n    : `${Math.round(ratio * 100)}%`;\n};\n\nconst NestedBoxes = ({\n  ratios,\n  fillColors,\n  textColors,\n  content,\n  firstSide = 100,\n  horizontal = true,\n  classes = \"\",\n  getInnerText = innerTextGetter,\n  bufferRatio = BUFFER_RATIO,\n  textBufferRatio = TEXT_BUFFER_RATIO,\n  defaultRatio = DEFAULT_RATIO,\n  capValue = CAP_VALUE,\n  fontSizeRatio = FONT_SIZE_RATIO,\n  headerFontSizeRatio = HEADER_FONT_SIZE_RATIO,\n  lineHeight = LINE_HEIGHT,\n}) => {\n  const resolveOrientation = (v1, v2) => {\n    return horizontal ? v2 : v1;\n  };\n\n  const bufferDistance = firstSide * (1 + bufferRatio);\n  const textBufferDistance = firstSide * (1 + textBufferRatio);\n\n  let side = firstSide;\n  let x = 0;\n  let y = 0;\n\n  const fontSize = firstSide * fontSizeRatio;\n  const headerFontSize = firstSide * headerFontSizeRatio;\n\n  const rects = [];\n  const texts = [];\n  const connectingLines = [];\n\n  _.each(ratios, (ratio, i) => {\n    // const noRatio = !ratio\n    const innerText = getInnerText(ratio, { capValue });\n    ratio = ratio || defaultRatio;\n\n    if (capValue && ratio > capValue) {\n      ratio = capValue;\n    }\n\n    const colorOuter = fillColors[i];\n    const colorInner = fillColors[i + 1];\n    const textColor = textColors[i + 1];\n\n    // add outer box\n    rects.push(\n      <rect\n        x={resolveOrientation(x, y)}\n        y={resolveOrientation(y, x)}\n        width={side}\n        height={side}\n        fill={colorOuter}\n      />\n    );\n\n    const { below = [] } = _.get(content, i, {});\n    const text = (\n      <text\n        fontSize={fontSize}\n        // set the initial y for all tspans\n        // the x we set on each individually so they don't try to go one after another\n        y={resolveOrientation(y + fontSize, textBufferDistance + fontSize)}\n      >\n        <tspan\n          className=\"percent\"\n          x={resolveOrientation(textBufferDistance, y)}\n          style={{ fill: textColor, fontSize: headerFontSize }}\n        >\n          {innerText}\n        </tspan>\n        {below.map((txt, j) => (\n          <tspan\n            key={i + j}\n            className=\"description\"\n            x={resolveOrientation(textBufferDistance, y)}\n            dy={fontSize * lineHeight}\n          >\n            {txt}\n          </tspan>\n        ))}\n      </text>\n    );\n    texts.push(text);\n\n    let nextSide = side * ratio;\n    const borderWidth = (side - nextSide) / 2; // the amount of outer box that shows around the inner box\n    x += borderWidth;\n    y += borderWidth;\n    side = nextSide;\n\n    // add inner box\n    rects.push(\n      <rect\n        x={resolveOrientation(x, y)}\n        y={resolveOrientation(y, x)}\n        width={side}\n        height={side}\n        fill={colorInner}\n      />\n    );\n\n    if (i === ratios.length - 1) {\n      return;\n    }\n\n    const lineStyle = {\n      strokeWidth: \".4\",\n      strokeDasharray: \".8 1\",\n    };\n    // if there's another box coming, add lines to it\n    const line1 = (\n      <line\n        style={lineStyle}\n        stroke={colorInner}\n        x1={resolveOrientation(x, y + side)}\n        x2={resolveOrientation(x, y + bufferDistance)}\n        y1={resolveOrientation(y + side, x)}\n        y2={resolveOrientation(y + bufferDistance, x)}\n      />\n    );\n    const line2 = (\n      <line\n        style={lineStyle}\n        stroke={colorInner}\n        x1={resolveOrientation(x + side, y + side)}\n        x2={resolveOrientation(x + side, y + bufferDistance)}\n        y1={resolveOrientation(y + side, x + side)}\n        y2={resolveOrientation(y + bufferDistance, x + side)}\n      />\n    );\n    connectingLines.push(line1, line2);\n\n    // and shift down for the next\n    y += bufferDistance;\n  });\n\n  const totalX = firstSide + (textBufferDistance + firstSide); // (text width)\n  const totalY = y + firstSide;\n  const totalXh = y + bufferDistance;\n  const totalYh = textBufferDistance + (headerFontSize + fontSize * 4); // (text height)\n\n  const classNames = \"nested-boxes \" + classes;\n\n  return (\n    <div className={classNames}>\n      {/* <p className='title'>{title}</p> */}\n      <svg\n        viewBox={`0 -2 ${resolveOrientation(\n          totalX,\n          totalXh\n        )} ${resolveOrientation(totalY, totalYh)}`}\n      >\n        {rects}\n        {texts}\n        {connectingLines}\n      </svg>\n    </div>\n  );\n};\n\nexport default NestedBoxes;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  AreaChart,\n  Area,\n  ComposedChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  LineChart,\n  Line,\n  ResponsiveContainer,\n  Legend,\n} from \"recharts\";\nimport { Box, useTheme } from \"@mui/system\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport NestedBoxes from \"./NestedBoxes\";\nimport {\n  getRC,\n  strokeIntensity,\n  fillIntensity,\n  themePrimary,\n  themeSecondary,\n} from \"../consts/colors\";\nimport { displayNumber, displayPercent } from \"../utils/display\";\nimport {\n  CONFIG_FIELDS as C,\n  DATA_FIELDS as D,\n  GENERATED_FIELDS as G,\n} from \"../consts/data\";\nimport { COUNTRIES } from \"../consts/countries\";\nimport { useMediaQuery } from \"@mui/material\";\n\n// TODO: standardize / create sane system for styles\n// TODO: CLEAN / EXTRACt this and other components\nconst CustomTooltip = ({ active, payload, label, isArea }) => {\n  if (active && payload && payload.length) {\n    // if lines, stack legend to match line height order\n    const payloads = isArea ? payload : _.sortBy(payload, \"value\");\n\n    let source = null;\n    return (\n      <Box sx={{ background: \"white\", p: 2 }} className=\"custom-tooltip\">\n        <strong className=\"label\">{label}</strong>\n        {payloads.reverse().map((p) => {\n          if (p.dataKey.includes(\"_bounds\")) return;\n\n          const bounds = _.get(p.payload, p.dataKey + \"_bounds\", []);\n          const formattedBounds = [D.value_lower, D.value_upper].map((F, i) =>\n            _.get(\n              p.payload,\n              [p.dataKey + \"_row\", `DISPLAY_${F.toUpperCase()}`],\n              bounds[i]\n            )\n          );\n\n          const v = _.get(\n            p.payload,\n            [p.dataKey + \"_row\", G.DISPLAY_VALUE],\n            p.value\n          );\n          // console.log(\"$$$\", v, p.payload);\n\n          // use first source\n          source =\n            source ||\n            _.get(p.payload, [p.dataKey + \"_row\", D.source_display]) ||\n            _.get(p.payload, [p.dataKey + \"_row\", D.source_database]);\n\n          return (\n            <Typography key={p.dataKey}>\n              <svg\n                width=\"18\"\n                viewBox=\"0 0 160 100\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <circle cx=\"50\" cy=\"50\" r=\"50\" fill={p.fill}></circle>\n              </svg>\n              {p.name}: {v}{\" \"}\n              {!!bounds.length && `(${formattedBounds.join(\" - \")})`}\n            </Typography>\n          );\n        })}\n        {source && (\n          <>\n            <br />\n            <u>Source</u>: {source}\n          </>\n        )}\n      </Box>\n    );\n  } else return null;\n};\n\nexport const Charts = ({ selectedIso, chartData }) => {\n  const [hiddenElements, setHiddenElements] = React.useState({});\n\n  const getLineChart = (chart) => {\n    const {\n      data,\n      chartId,\n      elements,\n      type,\n      isPercentage,\n      colors,\n      elementNameMap,\n    } = chart;\n    const isArea = type === \"area\";\n    const [, ElementComponent] = isArea ? [AreaChart, Area] : [LineChart, Line];\n\n    const formatter = isPercentage\n      ? (v) => displayPercent(v)\n      : (v) => displayNumber(v);\n\n    const getName = (elem) => _.get(elementNameMap, elem, elem);\n\n    const onLegendClick = (e) => {\n      console.log(e.dataKey);\n      const hiddenMap = _.cloneDeep(hiddenElements);\n      const hidden = _.get(hiddenMap, [chartId, e.dataKey], false);\n      _.set(hiddenMap, [chartId, e.dataKey], !hidden);\n      setHiddenElements(hiddenMap);\n    };\n\n    return (\n      <ResponsiveContainer\n        width=\"99%\"\n        aspect={1.25}\n        // height={400}\n        maxHeight={400}\n        // maxWidth={600}\n      >\n        <ComposedChart\n          // width={500}\n          // height={400}\n          data={data}\n          margin={{\n            top: 30,\n            right: 30,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis\n            width={70}\n            domain={isPercentage ? [0, 100] : undefined}\n            tickFormatter={formatter}\n          />\n          <Tooltip\n            cursor={{ stroke: getRC(themeSecondary, 10), strokeWidth: 1 }}\n            content={<CustomTooltip isArea={isArea} source={\"source\"} />}\n          />\n          <Legend onClick={onLegendClick} />\n          {elements.map((elem, i) => {\n            const isBounded =\n              !isArea &&\n              _.some(data, (d) => _.get(d, [elem + \"_bounds\"], []).length);\n            if (!isBounded) return null;\n            return (\n              <Area\n                key={i + \"_b\"}\n                // type=\"step\"\n                dataKey={elem + \"_bounds\"}\n                hide={_.get(hiddenElements, [chartId, elem], false)}\n                // stackId={i + 1}\n                legendType=\"none\"\n                tooltipType=\"none\"\n                stroke={getRC(colors[i], strokeIntensity - 3)}\n                fill={getRC(colors[i], fillIntensity - 3)}\n              />\n            );\n          })}\n          {elements.map((elem, i) => (\n            <ElementComponent\n              key={i}\n              // type=\"monotone\"\n              // dataBounds={_.get(elem, [elem + \"_bounds\"], [])}\n              dataKey={elem}\n              name={getName(elem)}\n              hide={_.get(hiddenElements, [chartId, elem], false)}\n              stackId={isArea ? 1 : i + 1000}\n              stroke={getRC(colors[i], strokeIntensity)}\n              fill={getRC(colors[i], fillIntensity)}\n            />\n          ))}\n        </ComposedChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  const getTable = (chart) => {\n    const { data } = chart;\n\n    const headers = data[0][\"values\"].map(({ column }) => (\n      <TableCell scope=\"col\" key={column}>\n        {column}\n      </TableCell>\n    ));\n\n    const rows = data.map(({ row, values }) => (\n      <TableRow key={row}>\n        <TableCell scope=\"row\" component=\"th\">\n          {row}\n        </TableCell>\n        {values.map(({ value, column, sheetRow }) => (\n          <TableCell key={column}>\n            {_.get(sheetRow, G.DISPLAY_VALUE, value) || \"N/A\"}\n            {/* {(value && (sheetRow && sheetRow[G.DISPLAY_VALUE] || value)) || \"N/A\"} */}\n          </TableCell>\n        ))}\n      </TableRow>\n    ));\n\n    return (\n      <ResponsiveContainer>\n        <TableContainer>\n          <Table\n            sx={{\n              \"& tbody tr:nth-of-type(odd)\": {\n                background: getRC(themePrimary, 6),\n              },\n              \"& td, & thead th\": {\n                textAlign: \"right\",\n              },\n            }}\n          >\n            <TableHead>\n              <TableRow>\n                <TableCell scope=\"col\"></TableCell>\n                {headers}\n              </TableRow>\n            </TableHead>\n            <TableBody>{rows}</TableBody>\n          </Table>\n        </TableContainer>\n      </ResponsiveContainer>\n    );\n  };\n\n  const getNested = (chart) => {\n    const theme = useTheme();\n    const isSm = useMediaQuery(theme.breakpoints.down(\"sm\"));\n    const isXl = useMediaQuery(theme.breakpoints.up(\"md\"));\n    const { data, elements, colors } = chart;\n    const xl = false;\n    // console.log(radColors);\n    const ratios = elements.map((el) => {\n      const val = data[el];\n      return val && val / 100;\n    });\n    // console.log(ratios);\n    return (\n      <>\n        <NestedBoxes\n          // circle={true}\n          // classes={xl ? \"xl\" : \"\"}\n          title={\"title\"}\n          bufferRatio={!isSm ? 0.8 : 0.2}\n          lineHeight={!isSm ? 1.4 : 1.1}\n          textBufferRatio={0.2}\n          firstSide={20}\n          horizontal={!isSm}\n          ratios={ratios}\n          fillColors={colors.map((c) => getRC(c, 8))}\n          textColors={colors.map((c) => getRC(c, 9))}\n          content={[\n            {\n              // inner: status,\n              below: [\"of people living with\", \"HIV know their status\"],\n            },\n            {\n              // inner: art,\n              below: [\n                \"of people living with\",\n                \"HIV who know their status\",\n                \"are on treatment\",\n              ],\n            },\n            {\n              // inner: suppression,\n              below: [\"of people on treatment\", \"are virally suppressed\"],\n            },\n          ]}\n        />\n        <br />\n      </>\n    );\n  };\n\n  const getIntro = (chart) => {\n    const country = COUNTRIES.find((c) => c.id === selectedIso);\n    return (\n      <>\n        <Typography\n          variant=\"h2\"\n          component=\"h1\"\n          sx={{\n            fontWeight: 500,\n            lineHeight: 1,\n            fontSize: { lg: \"6rem\" },\n            maxWidth: { lg: 760, xl: \"100%\" },\n            mb: { sm: 1, lg: 2 },\n          }}\n        >\n          {country && country.name}\n        </Typography>\n        <Box\n          sx={{\n            display: { sm: \"flex\" },\n            \"& dl:not(:last-child)\": { mr: { sm: 4, md: 10 } },\n            \"& dt h2\": {\n              fontWeight: 100,\n              letterSpacing: \".8px\",\n              textTransform: \"uppercase\",\n            },\n            \"& dt, dd\": { m: 0 },\n          }}\n        >\n          {chart.elements.map((elem) => {\n            return (\n              <dl key={elem}>\n                <dt>\n                  <Typography variant=\"h6\" component=\"h2\">\n                    {_.get(\n                      chart,\n                      [\"textValues\", `${elem}_row`, G.DISPLAY_NAME],\n                      \"\"\n                    )}\n                  </Typography>\n                </dt>\n                <dd>\n                  <Typography variant=\"h4\" component=\"h2\">\n                    {_.get(\n                      chart,\n                      [\"textValues\", `${elem}_row`, G.DISPLAY_VALUE],\n                      chart.textValues[elem]\n                    )}\n                  </Typography>\n                </dd>\n              </dl>\n            );\n          })}\n        </Box>\n      </>\n    );\n  };\n\n  const getChart = (chart) => {\n    // TODO: simplify\n    if (!chart) return null;\n    const { type, chartId, name } = chart;\n\n    // if (type === \"text\") {\n    if (chartId === \"intro\") {\n      return (\n        <Box\n          sx={{\n            // background: { xs: \"red\", sm: \"blue\", md: \"green\", lg: \"yellow\", xl: \"purple\" },\n            flexBasis: { xs: \"100%\", xl: 600 },\n            flexGrow: { xl: 0 },\n            p: 3,\n            // display: {md: \"flex\"},\n          }}\n          key={chartId}\n        >\n          {getIntro(chart)}\n        </Box>\n      );\n    }\n\n    if (type === \"table\") {\n      return (\n        <Box sx={{ flexBasis: \"100%\", maxWidth: 864, p: 3 }} key={chartId}>\n          <Typography variant=\"h5\" component=\"h3\">\n            {name}\n          </Typography>\n          {getTable(chart)}\n        </Box>\n      );\n    }\n\n    if (type === \"nested\") {\n      return (\n        <>\n          <Box\n            sx={{\n              flexBasis: { xs: \"100%\", xl: 700 },\n              flexGrow: { xl: 1 },\n              flexShrink: { xl: 1 },\n              mr: \"auto\",\n              ml: { xl: \"auto\" },\n              maxWidth: 864,\n              p: 3,\n            }}\n            key={chartId}\n          >\n            <Typography pb={3} variant=\"h5\" component=\"h3\">\n              {name}\n            </Typography>\n            {getNested(chart)}\n          </Box>\n          <Box sx={{ flexBasis: \"100%\", height: 0 }} />\n        </>\n      );\n    }\n    // if (chart.type === \"area\") return getAreaChart(chart);\n    return (\n      <Box\n        key={chartId}\n        sx={{\n          width: \"100%\",\n          maxWidth: { md: \"44%\", xl: \"29%\" },\n          p: 3,\n        }}\n      >\n        <Typography variant=\"h5\" component=\"h3\">\n          {name}\n        </Typography>\n        {getLineChart(chart)}\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      pt={8}\n      sx={{\n        justifyContent: { xs: \"space-evenly\", md: \"space-between\" },\n      }}\n    >\n      {chartData.map(getChart)}\n    </Box>\n  );\n};\n","// import \"./styles.css\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport getData from \"../getData\";\nimport { themePrimary, radColors, getRC } from \"../consts/colors\";\nimport { Container, Paper, Typography, useTheme } from \"@mui/material\";\nimport { Header } from \"./Header\";\nimport { Charts } from \"./Charts\";\nimport { COUNTRIES } from \"../consts/countries\";\nimport { Box } from \"@mui/system\";\nimport { transformLink } from \"../utils/display\";\n\nconst homeTexts = [\n  `\nOverview: The WHO Differentiated Services Delivery Strategic Initiatives dashboard brings together data on HIV testing services from various sources into one visual tool. We would like to acknowledge the support of the Ministries of Health of Member States, UNAIDS, the Bill and Melinda Gates Foundation, the President’s Emergency Programme for AIDS Relief (PEPFAR), USAID, the World Health Organization, and the Global Fund to Fight AIDS, Tuberculosis and Malaria. This project aims to provide local level data for in country action for policy-makers, programme directors, outreach workers and community activists among others. The most recent data available has been collected from the relevant organisation including UNAIDS (Spectrum estimates, Global AIDS Monitoring and the Key Population Atlas), UNPOP, UNICEF and the World Bank. USAID/PEPFAR have kindly provided HIV testing data by approach. Data gaps have been filled (where possible) by reviewing publicly available sources, most notably from Ministries of Health and PEPFAR country operational plans. All dashboards have been viewed and approved by the Ministries of Health. This dashboard does not cover in-depth policy information, PrEP or paediatric HIV testing but includes links to relevant sites that do cover this information.`,\n  `Contact: Cheryl Case Johnson (johnsonc@who.int)`,\n];\n\nconst SHOW_COLORS = false;\n\nexport default function App() {\n  const [chartData, setChartData] = React.useState([]);\n  const [dictionary, setDictionary] = React.useState([]);\n  const [selectedIso, setIso] = React.useState(null);\n\n  React.useEffect(() => {\n    if (!selectedIso) return;\n    getData(selectedIso).then((result) => {\n      console.log(\"@@@ ALL DATA: \");\n      console.log(result.charts);\n      setChartData(result.charts);\n      if (_.isEmpty(dictionary)) {\n        setDictionary(result.dictionary);\n      }\n    });\n  }, [selectedIso]);\n\n  const updateCountry = (e) => {\n    const value = e.target.value;\n    const realIso = _.some(COUNTRIES, ({ id }) => id === value);\n    setIso(realIso ? value : null);\n  };\n\n  // console.log(\"*\", chartData);\n  const loading = !_.some(\n    chartData,\n    (c) => c && c.country_iso_code === selectedIso\n  );\n\n  const theme = useTheme();\n  return (\n    <Paper\n      elevation={0}\n      sx={{\n        // keep in sync with index.html background\n        background: getRC(themePrimary, 3),\n        color: getRC(themePrimary, 12),\n        fontFamily: theme.typography.fontFamily,\n        p: { lg: 6 },\n      }}\n    >\n      <Header handleCountryChange={updateCountry} selectedIso={selectedIso} />\n      <br />\n\n      {!selectedIso ? (\n        <Box pt={\"20vh\"}>\n          {homeTexts.map((text, i) => (\n            <Typography\n              variant=\"body1\"\n              key={i}\n              sx={{ maxWidth: 600, margin: \"auto\" }}\n              pt={2}\n              px={3}\n              dangerouslySetInnerHTML={{\n                __html: text,\n              }}\n            />\n          ))}\n        </Box>\n      ) : loading ? (\n        <Box pt={\"50vh\"}>\n          <Typography\n            variant=\"body1\"\n            sx={{ textAlign: \"center\" }}\n            dangerouslySetInnerHTML={{\n              __html: \"loading...\",\n            }}\n          />\n        </Box>\n      ) : (\n        <Charts selectedIso={selectedIso} chartData={chartData} />\n      )}\n      {!!dictionary.length && !loading && (\n        <Box\n          sx={{\n            px: { xs: 3, lg: 10 },\n            mx: { lg: 5 },\n            mb: { lg: 5 },\n            py: 9,\n            mt: 9,\n            background: theme.palette.background.paper,\n          }}\n        >\n          <Typography\n            variant=\"h4\"\n            component=\"h2\"\n            dangerouslySetInnerHTML={{\n              __html: \"Glossary\",\n            }}\n          />\n          <Box\n            sx={{\n              columnCount: { md: 2, xl: 3 },\n              columnGap: { xs: \"2rem\", lg: \"5rem\" },\n              mt: 3,\n              \"& dl\": {\n                display: \"inline-block\",\n                mt: 0,\n                mb: { lg: 3 },\n              },\n              \"& dd\": { ml: 0, mt: { xs: 1 } },\n            }}\n          >\n            {dictionary\n              .sort((a, b) => a.term.toLowerCase() > b.term.toLowerCase())\n              .map(({ term, definition }) => {\n                return (\n                  <dl>\n                    <dt>\n                      <strong>{term}</strong>\n                    </dt>\n                    <dd>\n                      <Typography\n                        // sx={{ maxWidth: \"500px\" }}\n                        dangerouslySetInnerHTML={{\n                          __html: transformLink(definition),\n                        }}\n                      />\n                    </dd>\n                  </dl>\n                );\n              })}\n          </Box>\n        </Box>\n      )}\n      {SHOW_COLORS &&\n        radColors.map((rc) => (\n          <>\n            <br></br>\n            {_.map(Object.keys(radColors[0]), (meh, idx) => (\n              <span\n                style={{\n                  background: getRC(rc, idx + 1),\n                  height: \"70px\",\n                  width: \"70px\",\n                  display: \"inline-block\",\n                  textAlign: \"center\",\n                }}\n              >\n                {idx + 1}\n              </span>\n            ))}\n            {Object.keys(rc)[0].replace(/\\d/, \"\")}\n          </>\n        ))}\n    </Paper>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./components/App\";\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { getRC, themePrimary, themeSecondary } from \"./consts/colors\";\n// import { red } from '@mui/material/colors';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: getRC(themePrimary, 11),\n    },\n    secondary: {\n      main: getRC(themeSecondary, 8),\n    },\n  },\n  typography: {\n    fontFamily: [\n      'Archivo',\n      'sans-serif',\n    ].join(','),\n  },\n});\n\nfunction ThemedApp() {\n  return <ThemeProvider theme={theme}><App /></ThemeProvider>;\n}\n\n\nconst rootElement = document.getElementById(\"root\");\nrender(<ThemedApp />, rootElement);\n","import _ from \"lodash\";\n\nexport const capValue = (v, options = {}) => {\n  v = Number(v);\n  // !_.isEmpty(options) && console.log(\"cvOPTIONS: \", v, options);\n  if (options.cap) return Math.min(v, Number(options.cap));\n  return v;\n};\n\nexport const displayPercent = (v, options = {}) => {\n  // !_.isEmpty(options) && console.log(\"OPTIONS: \", v, options);\n  v = Number(v);\n  if (!isFinite(v)) return \"NA\";\n  if (options.cap && v > Number(options.cap)) {\n    const x = `>${options.cap}%`;\n    // console.log(\"!!!!\", x, v, options.cap);\n    return x;\n  }\n  if (v > 100) console.warn(\"Incorrect %\");\n\n  const decimals = options.decimals || 0;\n  return _.round(v, decimals).toString() + \"%\";\n};\n\nexport const displayNumber = (v, options = {}) => {\n  v = Number(v);\n  if (options.coarseFormatting) {\n    if (v > 1000000000) {\n      return _.round(v / 1000000000, 1).toString() + \" billion\";\n    } else if (v > 1000000) {\n      return _.round(v / 1000000, 1).toString() + \" million\";\n    } else if (v < 100) {\n      return \"<100\";\n    } else if (v < 200) {\n      return \"<200\";\n    } else if (v < 500) {\n      return \"<500\";\n    } else if (v < 1000) {\n      return \"<1000\";\n    } else {\n      v = Number(v.toPrecision(2));\n    }\n  }\n\n  // insert spaces rather than commas\n  return v.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1 \");\n};\n\nexport const transformLink = (t) =>\n  t.replaceAll(\"<a \", \"<a target='_blank' rel='noopener noreferrer'\");\n"],"sourceRoot":""}